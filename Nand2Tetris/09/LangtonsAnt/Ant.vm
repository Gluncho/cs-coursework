function Ant.new 1
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push constant 4
call Array.new 1
pop static 1
push constant 4
call Array.new 1
pop static 2
push constant 0
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 2
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
eq
not
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Ant.dispose 0
push argument 0
pop pointer 0
push static 0
call Array.dispose 1
pop temp 0
push static 1
call Array.dispose 1
pop temp 0
push static 2
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ant.drawCurrentPixel 0
push argument 0
pop pointer 0
push argument 1
call Screen.setColor 1
pop temp 0
push this 0
push this 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
function Ant.changeDirection 1
push argument 0
pop pointer 0
push pointer 0
call Ant.getCurrentColor 1
pop local 0
push local 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 3
pop this 2
goto IF_END1
label IF_FALSE1
push this 2
push constant 1
sub
pop this 2
label IF_END1
goto IF_END0
label IF_FALSE0
push this 2
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop this 2
goto IF_END2
label IF_FALSE2
push this 2
push constant 1
add
pop this 2
label IF_END2
label IF_END0
push constant 0
return
function Ant.flip 1
push argument 0
pop pointer 0
push pointer 0
call Ant.getCurrentColor 1
pop local 0
push local 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
function Ant.move 0
push argument 0
pop pointer 0
push this 0
push this 2
push static 1
add
pop pointer 1
push that 0
add
pop this 0
push this 1
push this 2
push static 2
add
pop pointer 1
push that 0
add
pop this 1
push this 0
push constant 512
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop this 0
label IF_FALSE0
push this 0
push constant 1
neg
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 511
pop this 0
label IF_FALSE1
push this 1
push constant 256
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop this 1
label IF_FALSE2
push this 1
push constant 1
neg
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 255
pop this 1
label IF_FALSE3
push constant 0
return
function Ant.getCurrentColor 4
push argument 0
pop pointer 0
push this 0
push this 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
push constant 16384
push constant 32
push this 1
call Math.multiply 2
add
push this 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push local 1
push local 3
push static 0
add
pop pointer 1
push that 0
and
pop local 2
push local 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push constant 0
return
label IF_END0
