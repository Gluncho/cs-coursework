// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;
    static Array mask;
    /** Initializes the Screen. */
    function void init() {
        var int cnt;
        let cnt = 1;
        let mask = Array.new(16);
        let mask[0] = 1;
        while(~(cnt = 16)){
            let mask[cnt] = mask[cnt-1] + mask[cnt-1];
            let cnt = cnt + 1;
        }
        let color = true;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, rem;
        let address = (32 * y) + (x / 16);
        let rem = x - (x / 16);
        if(color) {
            let screen[address] = screen[address] | mask[rem];
        } else {
            let screen[address] = screen[address] & (~mask[rem]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        if(y1 > y2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = y1;
        }

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        while((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x + a, y + b);

        }

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
